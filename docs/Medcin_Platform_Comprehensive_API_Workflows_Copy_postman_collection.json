{
	"info": {
		"_postman_id": "efbd8f79-4ef9-4d97-bdb5-7a9b58c48bc3",
		"name": "Medcin Platform - Comprehensive API Workflows Copy",
		"description": "Complete Postman collection for testing all API workflows and endpoints in the Medcin Platform. Includes authentication, content discovery, session management, and exam creation workflows with real database IDs.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36773225"
	},
	"item": [
		{
			"name": "üîê Authentication",
			"item": [
				{
					"name": "Login and Get JWT Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response",
									"pm.test('Login successful', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"});",
									"",
									"// Extract and store JWT token",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.tokens && response.data.tokens.accessToken) {",
									"        pm.environment.set('jwt_token', response.data.tokens.accessToken);",
									"        console.log('JWT token stored successfully');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						},
						"description": "Authenticate user and retrieve JWT token for subsequent API calls. Token is automatically stored in environment variable 'jwt_token'."
					},
					"response": []
				}
			],
			"description": "Authentication endpoints for obtaining JWT tokens required for protected API calls."
		},
		{
			"name": "üîÑ Workflow 1: Student Content Discovery",
			"item": [
				{
					"name": "Step 1: Get Content Filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Content filters retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(response.data).to.have.property('unites');",
									"    pm.expect(response.data).to.have.property('independentModules');",
									"});",
									"",
									"// Store sample IDs for subsequent requests",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.data.unites && response.data.unites.length > 0) {",
									"        pm.environment.set('sample_unite_id', response.data.unites[0].id);",
									"        if (response.data.unites[0].modules && response.data.unites[0].modules.length > 0) {",
									"            pm.environment.set('sample_module_id', response.data.unites[0].modules[0].id);",
									"        }",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/students/content/filters",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"students",
								"content",
								"filters"
							]
						},
						"description": "Retrieve available unites and individual modules that the student has access to based on their study pack subscriptions. This is the first step in the content discovery workflow."
					},
					"response": []
				},
				{
					"name": "Step 2A: Get Notes by Unite",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Notes by unite retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(response.data.data).to.have.property('filterInfo');",
									"    pm.expect(response.data.data).to.have.property('totalNotes');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/students/notes/by-module?uniteId=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"students",
								"notes",
								"by-module"
							],
							"query": [
								{
									"key": "uniteId",
									"value": "1",
									"description": "Real Unite ID: Basic Medical Sciences"
								}
							]
						},
						"description": "Retrieve notes from all modules within a specific unite. Tests unite-based filtering for content discovery."
					},
					"response": []
				},
				{
					"name": "Step 2B: Get Notes by Module",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/students/notes/by-module?moduleId=2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"students",
								"notes",
								"by-module"
							],
							"query": [
								{
									"key": "moduleId",
									"value": "2",
									"description": "Real Module ID: Human Physiology"
								}
							]
						},
						"description": "Retrieve notes from a specific module only. Tests module-based filtering for content discovery."
					},
					"response": []
				},
				{
					"name": "Step 3A: Get Labels by Unite",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/students/labels/by-module?uniteId=3",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"students",
								"labels",
								"by-module"
							],
							"query": [
								{
									"key": "uniteId",
									"value": "3",
									"description": "Real Unite ID: Basic Sciences - First Year Medicine"
								}
							]
						},
						"description": "Retrieve labels from all modules within a specific unite."
					},
					"response": []
				},
				{
					"name": "Step 3B: Get Labels by Module",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/students/labels/by-module?moduleId=4",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"students",
								"labels",
								"by-module"
							],
							"query": [
								{
									"key": "moduleId",
									"value": "4",
									"description": "Real Module ID: Anatomy"
								}
							]
						},
						"description": "Retrieve labels from a specific module only."
					},
					"response": []
				},
				{
					"name": "Step 4A: Get Courses by Unite",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/students/courses/by-module?uniteId=5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"students",
								"courses",
								"by-module"
							],
							"query": [
								{
									"key": "uniteId",
									"value": "5",
									"description": "Real Unite ID: Advanced Studies - First Year Medicine"
								}
							]
						},
						"description": "Retrieve courses from all modules within a specific unite."
					},
					"response": []
				},
				{
					"name": "Step 4B: Get Courses by Module",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/students/courses/by-module?moduleId=5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"students",
								"courses",
								"by-module"
							],
							"query": [
								{
									"key": "moduleId",
									"value": "5",
									"description": "Real Module ID: Physiology"
								}
							]
						},
						"description": "Retrieve courses from a specific module only."
					},
					"response": []
				},
				{
					"name": "‚ùå Validation: Missing Parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Missing parameters properly rejected', function () {",
									"    pm.response.to.have.status(400);",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.false;",
									"    pm.expect(response.error.message).to.include('Either uniteId or moduleId must be provided');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/students/notes/by-module",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"students",
								"notes",
								"by-module"
							]
						},
						"description": "Test parameter validation - should fail when neither uniteId nor moduleId is provided."
					},
					"response": []
				},
				{
					"name": "‚ùå Validation: Both Parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Both parameters properly rejected', function () {",
									"    pm.response.to.have.status(400);",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.false;",
									"    pm.expect(response.error.message).to.include('Cannot provide both uniteId and moduleId');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/students/labels/by-module?uniteId=1&moduleId=2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"students",
								"labels",
								"by-module"
							],
							"query": [
								{
									"key": "uniteId",
									"value": "1"
								},
								{
									"key": "moduleId",
									"value": "2"
								}
							]
						},
						"description": "Test parameter validation - should fail when both uniteId and moduleId are provided (mutually exclusive)."
					},
					"response": []
				}
			],
			"description": "Complete workflow for student content discovery and retrieval. Tests content filters, notes, labels, and courses endpoints with both unite and module filtering."
		},
		{
			"name": "üîÑ Workflow 2: Session Discovery and Retrieval",
			"item": [
				{
					"name": "Practice Sessions Workflow",
					"item": [
						{
							"name": "Step 1: Get Practice Session Filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Practice session filters retrieved successfully', function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json();",
											"    pm.expect(response.success).to.be.true;",
											"    pm.expect(response.data.data).to.have.property('unites');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/students/sessions/filters?sessionType=PRACTICE",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"students",
										"sessions",
										"filters"
									],
									"query": [
										{
											"key": "sessionType",
											"value": "PRACTICE",
											"description": "Filter for practice sessions only"
										}
									]
								},
								"description": "Get session counts by unite/module for practice sessions only. First step in practice session discovery workflow."
							},
							"response": []
						},
						{
							"name": "Step 2A: Get Practice Sessions by Module",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/students/practise-sessions?moduleId=2&sessionType=PRACTICE",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"students",
										"practise-sessions"
									],
									"query": [
										{
											"key": "moduleId",
											"value": "2",
											"description": "Real Module ID: Human Physiology"
										},
										{
											"key": "sessionType",
											"value": "PRACTICE"
										}
									]
								},
								"description": "Retrieve practice sessions for a specific module."
							},
							"response": []
						},
						{
							"name": "Step 2B: Get Practice Sessions by Unite",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/students/practise-sessions?uniteId=1&sessionType=PRACTICE",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"students",
										"practise-sessions"
									],
									"query": [
										{
											"key": "uniteId",
											"value": "1",
											"description": "Real Unite ID: Basic Medical Sciences"
										},
										{
											"key": "sessionType",
											"value": "PRACTICE"
										}
									]
								},
								"description": "Retrieve practice sessions for all modules within a unite."
							},
							"response": []
						}
					],
					"description": "Practice sessions discovery and retrieval workflow."
				},
				{
					"name": "Exam Sessions Workflow",
					"item": [
						{
							"name": "Step 1: Get Exam Session Filters",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/students/sessions/filters?sessionType=EXAM",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"students",
										"sessions",
										"filters"
									],
									"query": [
										{
											"key": "sessionType",
											"value": "EXAM",
											"description": "Filter for exam sessions only"
										}
									]
								},
								"description": "Get session counts by unite/module for exam sessions only."
							},
							"response": []
						},
						{
							"name": "Step 2A: Get Exam Sessions by Module",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/students/practise-sessions?moduleId=3&sessionType=EXAM",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"students",
										"practise-sessions"
									],
									"query": [
										{
											"key": "moduleId",
											"value": "3",
											"description": "Real Module ID: Pathology"
										},
										{
											"key": "sessionType",
											"value": "EXAM"
										}
									]
								},
								"description": "Retrieve exam sessions for a specific module."
							},
							"response": []
						},
						{
							"name": "Step 2B: Get Exam Sessions by Unite",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/students/practise-sessions?uniteId=2&sessionType=EXAM",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"students",
										"practise-sessions"
									],
									"query": [
										{
											"key": "uniteId",
											"value": "2",
											"description": "Real Unite ID: Clinical Sciences"
										},
										{
											"key": "sessionType",
											"value": "EXAM"
										}
									]
								},
								"description": "Retrieve exam sessions for all modules within a unite."
							},
							"response": []
						}
					],
					"description": "Exam sessions discovery and retrieval workflow."
				},
				{
					"name": "‚ùå Session Type Validation",
					"item": [
						{
							"name": "Missing sessionType Parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Missing sessionType properly rejected', function () {",
											"    pm.response.to.have.status(400);",
											"    const response = pm.response.json();",
											"    pm.expect(response.success).to.be.false;",
											"    pm.expect(response.error.message).to.include('sessionType parameter is required');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/students/sessions/filters",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"students",
										"sessions",
										"filters"
									]
								},
								"description": "Test validation - should fail when sessionType parameter is missing."
							},
							"response": []
						},
						{
							"name": "Invalid sessionType Value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Invalid sessionType properly rejected', function () {",
											"    pm.response.to.have.status(400);",
											"    const response = pm.response.json();",
											"    pm.expect(response.success).to.be.false;",
											"    pm.expect(response.error.message).to.include('Invalid sessionType');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/students/sessions/filters?sessionType=INVALID",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"students",
										"sessions",
										"filters"
									],
									"query": [
										{
											"key": "sessionType",
											"value": "INVALID"
										}
									]
								},
								"description": "Test validation - should fail when sessionType has invalid value."
							},
							"response": []
						}
					],
					"description": "Validation tests for session type parameters."
				}
			],
			"description": "Complete workflow for session discovery and retrieval. Tests both practice and exam session workflows with proper type separation."
		},
		{
			"name": "üîÑ Workflow 3: Exam Session Creation",
			"item": [
				{
					"name": "Step 1: Get Available Filter Options",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Exam session filters retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(response.data).to.have.property('universities');",
									"    pm.expect(response.data).to.have.property('examYears');",
									"    pm.expect(response.data).to.have.property('rotations');",
									"    pm.expect(response.data).to.have.property('unites');",
									"    pm.expect(response.data).to.have.property('totalQuestionCount');",
									"});",
									"",
									"// Store sample IDs for question retrieval",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.data.unites && response.data.unites.length > 0) {",
									"        pm.environment.set('exam_unite_id', response.data.unites[0].id);",
									"    }",
									"    if (response.data.individualModules && response.data.individualModules.length > 0) {",
									"        pm.environment.set('exam_module_id', response.data.individualModules[0].id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/quizzes/exam-session-filters",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"quizzes",
								"exam-session-filters"
							]
						},
						"description": "Retrieve all available filter categories based on actual question data. Returns universities, question sources, exam years, rotations, unites, and individual modules with question counts."
					},
					"response": []
				},
				{
					"name": "Step 2A: Retrieve Questions by Unite",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Questions by unite retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(response.data.data).to.have.property('questions');",
									"    pm.expect(response.data.data).to.have.property('totalCount');",
									"    pm.expect(response.data.data).to.have.property('filterInfo');",
									"});",
									"",
									"// Store question IDs for session creation",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.data.data.questions && response.data.data.questions.length > 0) {",
									"        const questionIds = response.data.data.questions.slice(0, 3).map(q => q.id);",
									"        pm.environment.set('sample_question_ids', JSON.stringify(questionIds));",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/quizzes/questions-by-unite-or-module?uniteId=5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"quizzes",
								"questions-by-unite-or-module"
							],
							"query": [
								{
									"key": "uniteId",
									"value": "5",
									"description": "Real Unite ID: Advanced Studies - First Year Medicine"
								}
							]
						},
						"description": "Retrieve questions filtered by unite ID. Questions include all required fields for frontend filtering: university, source, examYear, rotation, yearLevel, questionType."
					},
					"response": []
				},
				{
					"name": "Step 2B: Retrieve Questions by Module",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/quizzes/questions-by-unite-or-module?moduleId=4",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"quizzes",
								"questions-by-unite-or-module"
							],
							"query": [
								{
									"key": "moduleId",
									"value": "4",
									"description": "Real Module ID: Anatomy"
								}
							]
						},
						"description": "Retrieve questions filtered by module ID. Questions include all required fields for frontend filtering."
					},
					"response": []
				},
				{
					"name": "Step 3: Create Exam Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Exam session created successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"});",
									"",
									"// Store session ID for future reference",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.data && (response.data.sessionId || response.data.data.sessionId)) {",
									"        const sessionId = response.data.sessionId || response.data.data.sessionId;",
									"        pm.environment.set('created_session_id', sessionId);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Use stored question IDs or fallback to real IDs",
									"let questionIds = [1, 2, 3]; // Fallback to real question IDs",
									"try {",
									"    const storedIds = pm.environment.get('sample_question_ids');",
									"    if (storedIds) {",
									"        questionIds = JSON.parse(storedIds);",
									"    }",
									"} catch (e) {",
									"    console.log('Using fallback question IDs');",
									"}",
									"",
									"// Set the request body with question IDs",
									"const requestBody = {",
									"    title: 'Custom Anatomy Exam - Postman Test',",
									"    type: 'EXAM',",
									"    questionIds: questionIds",
									"};",
									"",
									"pm.environment.set('exam_session_body', JSON.stringify(requestBody));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Custom Anatomy Exam - Postman Test\",\n  \"type\": \"EXAM\",\n  \"questionIds\": [1, 2, 3]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/quizzes/create-session-by-questions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"quizzes",
								"create-session-by-questions"
							]
						},
						"description": "Create exam session using filtered question IDs. Uses real question IDs from database: 1, 2, 3."
					},
					"response": []
				},
				{
					"name": "‚ùå Validation: Both Parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Both parameters properly rejected', function () {",
									"    pm.response.to.have.status(400);",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/quizzes/questions-by-unite-or-module?uniteId=1&moduleId=2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"quizzes",
								"questions-by-unite-or-module"
							],
							"query": [
								{
									"key": "uniteId",
									"value": "1"
								},
								{
									"key": "moduleId",
									"value": "2"
								}
							]
						},
						"description": "Test validation - should fail when both uniteId and moduleId are provided (mutually exclusive)."
					},
					"response": []
				},
				{
					"name": "‚ùå Validation: Invalid Question IDs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Invalid question IDs handled appropriately', function () {",
									"    // May return 400 or 200 depending on implementation",
									"    pm.expect([200, 400]).to.include(pm.response.code);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Invalid Test Session\",\n  \"type\": \"EXAM\",\n  \"questionIds\": [99999, 99998]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/quizzes/create-session-by-questions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"quizzes",
								"create-session-by-questions"
							]
						},
						"description": "Test session creation with invalid question IDs."
					},
					"response": []
				}
			],
			"description": "Complete workflow for exam session creation. Tests filter options retrieval, question retrieval by unite/module, and session creation with custom question selection."
		},
		{
			"name": "üìä Additional API Endpoints",
			"item": [
				{
					"name": "Student Analytics",
					"item": [
						{
							"name": "Get Student Questions",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/students/questions?page=1&limit=10",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"students",
										"questions"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "10"
										}
									]
								},
								"description": "Retrieve student questions with pagination. Includes rotation field support."
							},
							"response": []
						},
						{
							"name": "Get Student Labels",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/students/labels",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"students",
										"labels"
									]
								},
								"description": "Retrieve all student labels with statistics."
							},
							"response": []
						},
						{
							"name": "Get Student Study Packs",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/students/study-packs",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"students",
										"study-packs"
									]
								},
								"description": "Retrieve student's accessible study packs with enhanced structure including independent modules."
							},
							"response": []
						}
					],
					"description": "Student analytics and data retrieval endpoints."
				},
				{
					"name": "Course Management",
					"item": [
						{
							"name": "Create Course Layer",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"courseId\": 1,\n  \"layerNumber\": 1,\n  \"isQcmLayer\": false\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v1/students/course-layers",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"students",
										"course-layers"
									]
								},
								"description": "Create a course layer. Uses real course ID: 1 (Basic Anatomy)."
							},
							"response": []
						},
						{
							"name": "Get Course Layers",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/students/courses/1/layers",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"students",
										"courses",
										"1",
										"layers"
									]
								},
								"description": "Retrieve all layers for a specific course. Uses real course ID: 1."
							},
							"response": []
						},
						{
							"name": "Update Course Layer",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"isCompleted\": true,\n  \"isQcmLayer\": false\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v1/students/course-layers/1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"students",
										"course-layers",
										"1"
									]
								},
								"description": "Update course layer completion status and QCM layer flag."
							},
							"response": []
						}
					],
					"description": "Course layer management endpoints with QCM layer support."
				},
				{
					"name": "Session Management",
					"item": [
						{
							"name": "Submit Quiz Session Answer",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"answers\": [\n    {\n      \"questionId\": 1,\n      \"selectedAnswerId\": 1\n    },\n    {\n      \"questionId\": 2,\n      \"selectedAnswerId\": 2\n    }\n  ],\n  \"timeSpent\": 1800\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v1/students/quiz-sessions/1/submit-answer",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"students",
										"quiz-sessions",
										"1",
										"submit-answer"
									]
								},
								"description": "Submit answers for a quiz session with enhanced scoring and time tracking. Uses real question IDs and session ID."
							},
							"response": []
						},
						{
							"name": "Get Practice Session Statistics",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/students/practise-sessions/module/2",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"students",
										"practise-sessions",
										"module",
										"2"
									]
								},
								"description": "Retrieve detailed practice session statistics for a specific module. Uses real module ID: 2 (Human Physiology)."
							},
							"response": []
						}
					],
					"description": "Session submission and statistics endpoints."
				}
			],
			"description": "Additional API endpoints for comprehensive platform functionality testing."
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-set base URL if not defined",
					"if (!pm.environment.get('base_url')) {",
					"    pm.environment.set('base_url', 'https://658005ddcc93.ngrok-free.app/');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://658005ddcc93.ngrok-free.app/",
			"type": "string"
		},
		{
			"key": "jwt_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "sample_unite_id",
			"value": "1",
			"type": "string"
		},
		{
			"key": "sample_module_id",
			"value": "2",
			"type": "string"
		},
		{
			"key": "exam_unite_id",
			"value": "5",
			"type": "string"
		},
		{
			"key": "exam_module_id",
			"value": "4",
			"type": "string"
		},
		{
			"key": "sample_question_ids",
			"value": "[1,2,3]",
			"type": "string"
		},
		{
			"key": "created_session_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "practice_session_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "real_user_id",
			"value": "534",
			"type": "string"
		},
		{
			"key": "real_university_id",
			"value": "2",
			"type": "string"
		},
		{
			"key": "real_course_id",
			"value": "1",
			"type": "string"
		}
	]
}